# ConfigMap containing bash script to automate Mongo replicaset
# creation.
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init
data:
  init.sh: |
    #!/bin/bash

    # Wait for the readiness health checks to pass so that the mongo
    # names resolve.
    until ping -c 1 ${HOSTNAME}.mongo; do
      echo "waiting for DNS (${HOSTNAME}.mongo)..."
      sleep 2
    done

    until /usr/bin/mongo --eval 'printjson(db.serverStatus())'; do
      echo "connecting to local mongo..."
      sleep 2
    done
    echo "connected to local."

    HOST=mongo-0.mongo:27017

    until usr/bin/mongo --host=${HOST} --eval='printjson(db.serverStatus())'; do
      echo "connecting to remote mongo..."
      sleep 2
    done
    echo "connected to remote."

    if [[ "${HOSTNAME}" != 'mongo-0' ]]; then
      until /usr/bin/mongo --host={$HOST} --eval='printjson(rs.status())' \
        | grep -v "no replset config has been received"; do
        echo "waiting for replication set initialization"
        sleep 2
      done
      echo "adding self to mongo-0"
      /usr/bin/mongo --host=${HOST} --eval="printjson(rs.add('${HOSTNAME}.mongo'))"
    fi

    if [[ "${HOSTNAME}" == 'mongo-0' ]]; then
      echo "initializing replica set"
      /usr/bin/mongo --eval="printjson(rs.initiate(\
        {'_id': 'rs0', 'members': [{ '_id': 0, 'host': 'mongo-0.mongo:27017' }]}))"
    fi
    echo "initialized"

    while true; do
      sleep 3600
    done
---
# Headless service to manage DNS entries for the mongo StatefulSet.
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  ports:
    - port: 27017
      name: peer
  clusterIP: None
  selector:
    app: mongo
---
# StatefulSet for managing a Mongo replica set backed by persistent
# storage.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: mongo
  replicas: 3
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongodb
          image: mongo:3.4.1
          command: [ "mongod", "--replSet", "rs0" ]
          ports:
              - containerPort: 27017
                name: peer
          volumeMounts:
            - name: database
              mountPath: /data/db
          livenessProbe:
            exec:
              command: [ "usr/bin/mongo", "--eval", "db.serverStatus()" ]
            initialDelaySeconds: 10
            timeoutSeconds: 10
        - name: init-mongo
          image: mongo:3.4.1
          command: [ "bash", "/config/init.sh" ]
          volumeMounts:
            - name: config
              mountPath: /config
      volumes:
        - name: config
          configMap:
            name: "mongo-init"
  volumeClaimTemplates:
    - metadata:
        name: database
        annotations:
          # Specified for demonstration only. default storage class
          # doesn't require an annotation.
          volume.alpha.kubernetes.io/storage-class: default
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi